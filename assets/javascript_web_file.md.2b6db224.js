import{_ as n,c as s,o as a,a as p}from"./app.2a3660c5.js";const m='{"title":"FILE","description":"","frontmatter":{},"headers":[{"level":2,"title":"base64 \u56FE\u7247\u8F6C\u6587\u4EF6","slug":"base64-\u56FE\u7247\u8F6C\u6587\u4EF6"},{"level":2,"title":"\u6587\u4EF6\u5185\u5BB9\u751F\u6210md5","slug":"\u6587\u4EF6\u5185\u5BB9\u751F\u6210md5"},{"level":2,"title":"Blob\u8F6CFile","slug":"blob\u8F6Cfile"},{"level":2,"title":"File\u8F6CBlob","slug":"file\u8F6Cblob"}],"relativePath":"javascript/web/file.md"}',t={},o=p(`<h1 id="file" tabindex="-1">FILE <a class="header-anchor" href="#file" aria-hidden="true">#</a></h1><h2 id="base64-\u56FE\u7247\u8F6C\u6587\u4EF6" tabindex="-1">base64 \u56FE\u7247\u8F6C\u6587\u4EF6 <a class="header-anchor" href="#base64-\u56FE\u7247\u8F6C\u6587\u4EF6" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token comment">// \u5C06base64\u8F6C\u6362\u4E3A\u6587\u4EF6</span>
<span class="token keyword">function</span> <span class="token function">dataURLtoFile</span><span class="token punctuation">(</span><span class="token parameter">dataurl<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> dataurl<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> mime <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:(.*?);</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> bstr <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">atob</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> bstr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">const</span> u8arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    u8arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> bstr<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span>u8arr<span class="token punctuation">]</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> mime <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u6587\u4EF6\u5185\u5BB9\u751F\u6210md5" tabindex="-1">\u6587\u4EF6\u5185\u5BB9\u751F\u6210md5 <a class="header-anchor" href="#\u6587\u4EF6\u5185\u5BB9\u751F\u6210md5" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">import</span> SparkMd5 <span class="token keyword">from</span> <span class="token string">&#39;spark-md5&#39;</span>
<span class="token comment">/**
 * \u901A\u8FC7\u6587\u4EF6\u5185\u5BB9\u751F\u6210md5\u503C
 * @async
 * @param {*} file \u6587\u4EF6\u5185\u5BB9File\u5BF9\u8C61\u5B9E\u4F8B
 * @returns \u6587\u4EF6\u5185\u5BB9\u7684md5\u503C
 */</span>
<span class="token keyword">function</span> <span class="token function">generateMd5fromFile</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sliceLength <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">const</span> chunkSize <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>size <span class="token operator">/</span> sliceLength<span class="token punctuation">)</span>
    <span class="token keyword">const</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> md5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">const</span> <span class="token function-variable function">loadFile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> slice <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index <span class="token operator">+</span> chunkSize<span class="token punctuation">)</span>
      fileReader<span class="token punctuation">.</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fileReader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      md5<span class="token punctuation">.</span><span class="token function">appendBinary</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        index <span class="token operator">+=</span> chunkSize
        <span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> sqlexecmd5 <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>sqlexecmd5<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="blob\u8F6Cfile" tabindex="-1">Blob\u8F6CFile <a class="header-anchor" href="#blob\u8F6Cfile" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">let</span> files <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>blob<span class="token punctuation">]</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> file<span class="token punctuation">.</span>type<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="file\u8F6Cblob" tabindex="-1">File\u8F6CBlob <a class="header-anchor" href="#file\u8F6Cblob" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> fileType <span class="token operator">||</span> <span class="token string">&#39;application/*&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> blobUrl <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>
</code></pre></div>`,9),e=[o];function c(l,u,k,i,r,d){return a(),s("div",null,e)}var b=n(t,[["render",c]]);export{m as __pageData,b as default};
