import{_ as n,c as s,o as a,a as t}from"./app.a8980bfd.js";const h='{"title":"\u5F02\u6B65\u5FAA\u73AF","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u4E32\u884C\u5F02\u6B65\u5FAA\u73AF","slug":"\u4E32\u884C\u5F02\u6B65\u5FAA\u73AF"},{"level":2,"title":"\u5E76\u884C\u5F02\u6B65\u5FAA\u73AF","slug":"\u5E76\u884C\u5F02\u6B65\u5FAA\u73AF"}],"relativePath":"javascript/async/for.md"}',p={},o=t(`<h1 id="\u5F02\u6B65\u5FAA\u73AF" tabindex="-1">\u5F02\u6B65\u5FAA\u73AF <a class="header-anchor" href="#\u5F02\u6B65\u5FAA\u73AF" aria-hidden="true">#</a></h1><h2 id="\u4E32\u884C\u5F02\u6B65\u5FAA\u73AF" tabindex="-1">\u4E32\u884C\u5F02\u6B65\u5FAA\u73AF <a class="header-anchor" href="#\u4E32\u884C\u5F02\u6B65\u5FAA\u73AF" aria-hidden="true">#</a></h2><p>async\uFF0Cawait\u65F6\u5982\u4F55\u5FAA\u73AF\uFF0C\u53C2\u8003<a href="https://github.com/FunnyLiu/umi/blob/readsource/packages/core/src/Service/Service.ts#L262" target="_blank" rel="noopener noreferrer">umi</a>\uFF0C\u901A\u8FC7while\u548C\u6570\u7EC4\u957F\u5EA6\u914D\u5408\uFF1A</p><div class="language-js"><pre><code><span class="token comment">// \u4E00\u4E2A\u4E2A\u7684\u5B8C\u6210\u5F02\u6B65\u64CD\u4F5C</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>initialPresets<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initPreset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>initialPresets<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>forEach\u53EA\u652F\u6301\u540C\u6B65\uFF0C\u6240\u4EE5\u53EF\u4EE5\u4F7F\u7528for of\u3001for \u6216\u8005while</p><div class="language-js"><pre><code>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
     <span class="token punctuation">}</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>\u56E0\u4E3A for...of \u5185\u90E8\u5904\u7406\u7684\u673A\u5236\u548C forEach \u4E0D\u540C\uFF0CforEach \u662F\u76F4\u63A5\u8C03\u7528\u56DE\u8C03\u51FD\u6570\uFF0Cfor...of \u662F\u901A\u8FC7\u8FED\u4EE3\u5668\u7684\u65B9\u5F0F\u53BB\u904D\u5386</p><h2 id="\u5E76\u884C\u5F02\u6B65\u5FAA\u73AF" tabindex="-1">\u5E76\u884C\u5F02\u6B65\u5FAA\u73AF <a class="header-anchor" href="#\u5E76\u884C\u5F02\u6B65\u5FAA\u73AF" aria-hidden="true">#</a></h2><p>\u524D\u9762\u63D0\u5230\u7684for-of\u914D\u5408await\u867D\u7136\u53EF\u4EE5\u5FAA\u73AF\uFF0C\u4F46\u662F\u662F\u4E32\u884C\u963B\u585E\u7684\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">things</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> thing <span class="token keyword">of</span> things<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Bad: each loop iteration is delayed until the entire asynchronous operation completes</span>
    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">bar</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">baz</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u53EF\u4EE5\u901A\u8FC7Promise.all\u6765\u4F18\u5316\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">things</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> thing <span class="token keyword">of</span> things<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Good: all asynchronous operations are immediately started.</span>
    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Now that all the asynchronous operations are running, here we wait until they all complete.</span>
  <span class="token keyword">return</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u7528map\u914D\u5408Promise.all\u4E5F\u662F\u53EF\u4EE5\u7684\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncFunction</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> promises <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncFunction</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6, 8, 10]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,14),e=[o];function c(u,l,k,i,r,d){return a(),s("div",null,e)}var m=n(p,[["render",c]]);export{h as __pageData,m as default};
