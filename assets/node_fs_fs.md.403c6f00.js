import{_ as n,c as s,o as a,a as t}from"./app.d572062b.js";const h='{"title":"\u6587\u4EF6","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u5224\u65AD\u6587\u4EF6\u662F\u5426\u5B58\u5728\uFF0C\u4E0D\u5B58\u5728\u5C31\u521B\u5EFA","slug":"\u5224\u65AD\u6587\u4EF6\u662F\u5426\u5B58\u5728\uFF0C\u4E0D\u5B58\u5728\u5C31\u521B\u5EFA"},{"level":2,"title":"\u5224\u65AD\u6587\u4EF6\u6216\u76EE\u5F55\u662F\u5426\u5B58\u5728","slug":"\u5224\u65AD\u6587\u4EF6\u6216\u76EE\u5F55\u662F\u5426\u5B58\u5728"},{"level":2,"title":"\u9012\u5F52\u521B\u5EFA","slug":"\u9012\u5F52\u521B\u5EFA"},{"level":2,"title":"\u8BFB\u53D6 json","slug":"\u8BFB\u53D6-json"},{"level":2,"title":"\u5199\u5165 json","slug":"\u5199\u5165-json"}],"relativePath":"node/fs/fs.md"}',p={},o=t(`<h1 id="\u6587\u4EF6" tabindex="-1">\u6587\u4EF6 <a class="header-anchor" href="#\u6587\u4EF6" aria-hidden="true">#</a></h1><h2 id="\u5224\u65AD\u6587\u4EF6\u662F\u5426\u5B58\u5728\uFF0C\u4E0D\u5B58\u5728\u5C31\u521B\u5EFA" tabindex="-1">\u5224\u65AD\u6587\u4EF6\u662F\u5426\u5B58\u5728\uFF0C\u4E0D\u5B58\u5728\u5C31\u521B\u5EFA <a class="header-anchor" href="#\u5224\u65AD\u6587\u4EF6\u662F\u5426\u5B58\u5728\uFF0C\u4E0D\u5B58\u5728\u5C31\u521B\u5EFA" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>swaggerPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>swaggerPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u5224\u65AD\u6587\u4EF6\u6216\u76EE\u5F55\u662F\u5426\u5B58\u5728" tabindex="-1">\u5224\u65AD\u6587\u4EF6\u6216\u76EE\u5F55\u662F\u5426\u5B58\u5728 <a class="header-anchor" href="#\u5224\u65AD\u6587\u4EF6\u6216\u76EE\u5F55\u662F\u5426\u5B58\u5728" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token comment">/**
 * \u5224\u65AD\u6587\u4EF6\u6216\u8005\u76EE\u5F55\u662F\u5426\u5B58\u5728
 *
 * \u65B0\u589E\u4E8Ev0.0.7
 *
 * \u811A\u672C\u4E3E\u4F8B
 * \`\`\`
 *   import { exists } from &#39;@tomato-node/fs&#39;;
 *   //callback style
 *   const callback=(isExist)=&gt;{
 *     console.log(isExist?true:false)
 *   };
 *   exists(&#39;file&#39;,callback);
 *   //promise style
 *   async(()=&gt;{
 *     const isExist = await exists(&#39;file&#39;);
 *   })()
 * \`\`\`
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">filename</span><span class="token operator">:</span> string<span class="token punctuation">,</span> callback<span class="token operator">?</span><span class="token operator">:</span> FunctionType<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// callback</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// or promise</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u9012\u5F52\u521B\u5EFA" tabindex="-1">\u9012\u5F52\u521B\u5EFA <a class="header-anchor" href="#\u9012\u5F52\u521B\u5EFA" aria-hidden="true">#</a></h2><p>\u76F4\u63A5\u7528\u539F\u751F mkdir\uFF0Crecursive \u4E3A true \u5373\u53EF</p><h2 id="\u8BFB\u53D6-json" tabindex="-1">\u8BFB\u53D6 json <a class="header-anchor" href="#\u8BFB\u53D6-json" aria-hidden="true">#</a></h2><div class="language-js"><pre><code>exports<span class="token punctuation">.</span><span class="token function-variable function">readJSONSync</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filepath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>filepath <span class="token operator">+</span> <span class="token string">&quot; is not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">readJSON</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filepath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fs
    <span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">exists</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>exists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>filepath <span class="token operator">+</span> <span class="token string">&quot; is not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">buf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="\u5199\u5165-json" tabindex="-1">\u5199\u5165 json <a class="header-anchor" href="#\u5199\u5165-json" aria-hidden="true">#</a></h2><p>\u4F9D\u8D56mkdirp\u8FD9\u4E2A\u5305\uFF1A</p><div class="language-js"><pre><code>exports<span class="token punctuation">.</span><span class="token function-variable function">writeJSONSync</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filepath<span class="token punctuation">,</span> str<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">&quot;space&quot;</span> <span class="token keyword">in</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>space <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  mkdirp<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> options<span class="token punctuation">.</span>replacer<span class="token punctuation">,</span> options<span class="token punctuation">.</span>space<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">writeJSON</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filepath<span class="token punctuation">,</span> str<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">&quot;space&quot;</span> <span class="token keyword">in</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>space <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> options<span class="token punctuation">.</span>replacer<span class="token punctuation">,</span> options<span class="token punctuation">.</span>space<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">mkdirp</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,12),c=[o];function e(u,l,i,k,r,d){return a(),s("div",null,c)}var y=n(p,[["render",e]]);export{h as __pageData,y as default};
